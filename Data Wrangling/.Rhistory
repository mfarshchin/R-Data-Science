source('~/Google Drive/DataScienceEdx/Data Wrangling/DirectoryAndPath.R', echo=TRUE)
# check if the file exists
file.exists(filename)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
?read_lines
getwd
getwd()
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
path
dat <- read_csv(filename)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
?read_csv
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
dat
murders
ls
ls()
dat
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
dat
c("./data/",filename)
"./data/"+filename
class(filename)
"ali"+"reza"
("ali","reza")
c("ali","reza")
paste("./data/",filename)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
filename
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
class(dat)
file.path('.data/',filename)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Readr_readxl.R', echo=TRUE)
source('~/Google Drive/DataScienceEdx/Data Wrangling/DownloadFromInternet.R', echo=TRUE)
tmp_filename
url<-"http://mlr.cs.umass.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"
dat<-read_csv(url)
dat
dat<-read_csv2(url)
dat
dat<-read_table(url)
dat
dat<-read_tsv(url)
dat
nrow(dat)
ncol(dat)
dat<-read_csv(url)
ncol(dat)
nrow(dat)
url <- "http://mlr.cs.umass.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"
df <- read_csv(url, col_names = FALSE)
nrow(df)
df
source('~/Google Drive/DataScienceEdx/Data Wrangling/Tidy.R', echo=TRUE)
wide_data
select(wide_data, country, `1960`:`1967`)
new_tidy_data<-wide_data%>%
gather(year,fertility,'1960':'2015')
new_tidy_data
# alternative is the following
new_tidy_data<-wide_data%>%
gather(year,fertility,-country)
new_tidy_data
# check class of original data
class(wide_data$year)
# check class of new data
class(new_tidy_data$year)
# to take care of the data class we add convert=TRUE to the gather function
new_tidy_data<-wide_data%>%
gather(year,fertility,-country,convert=TRUE)
class(new_tidy_data$year)
# ggplot works on new tidy data
new_tidy_data %>%
ggplot(aes(year, fertility, color = country)) +
geom_point()
# convert tidy data to wide format data
new_wide_data<-new_tidy_data%>%spread(year,fertility)
select(new_wide_data, country, `1960`:`1967`)
source('~/.active-rstudio-document', echo=TRUE)
# gather all columns except country
dat <- raw_dat %>% gather(key, value, -country)
head(dat)
dat$key[1:5]
dat
dat %>% separate(key, c("year", "variable_name"), "_")
dat %>% separate(key, c("year", "variable_name"))
dat %>% separate(key, c("year", "first_variable_name", "second_variable_name"),
fill = "right")
# split on first underscore but keep life_expectancy merged
dat %>% separate(key, c("year", "variable_name"), sep = "_", extra = "merge")
# separate then spread
dat %>% separate(key, c("year", "variable_name"), sep = "_", extra = "merge") %>%
spread(variable_name, value)
# separate then unite
dat %>%
separate(key, c("year", "first_variable_name", "second_variable_name"), fill = "right") %>%
unite(variable_name, first_variable_name, second_variable_name, sep="_")
# full code for tidying data
dat %>%
separate(key, c("year", "first_variable_name", "second_variable_name"), fill = "right") %>%
unite(variable_name, first_variable_name, second_variable_name, sep="_") %>%
spread(variable_name, value) %>%
rename(fertility = fertility_NA)
d <- read_csv("times.csv")
data(co2)
head(co2)
co2
head('co2')
head(co2)
CO2
co2
co2_wide <- data.frame(matrix(co2, ncol = 12, byrow = TRUE)) %>%
setNames(1:12) %>%
mutate(year = as.character(1959:1997))
co2_wide
co2_tidy <- gather(co2_wide,month,co2,-year)
co2_tidy
head(co2_tidy)
co2_tidy %>% ggplot(aes(as.numeric(month), co2, color = year)) + geom_line()
library(dslabs)
data(admissions)
dat <- admissions %>% select(-applicants)
dat_tidy <- spread(dat, major, admitted)
data_tidy
dat_tidy
dat_tidy <- spread(dat, gender, major)
dat_tidy
dat_tidy <- spread(dat, gender, admitted)
dat_tidy
tmp <- gather(admissions, key, value, admitted:applicants)
tmp
source('~/Google Drive/DataScienceEdx/Data Wrangling/Tidy_Combine.R', echo=TRUE)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Tidy_Combine.R', echo=TRUE)
source('~/Google Drive/DataScienceEdx/Data Wrangling/Tidy_Combine.R', echo=TRUE)
# Note that order of data is not the same in these tables so:
identical(results_us_election_2016$state, murders$state)
# Use left_join (we will remove the others column and rename electoral_
# votes so that the tables fit on the page):
tab<-left_join(murders,results_us_election_2016,by='state')
head(tab)
# Use left_join (we will remove the others column and rename electoral_
# votes so that the tables fit on the page):
tab<-left_join(murders,results_us_election_2016,by='state')%>%
select(-others)%>%rename(ev='electoral_votes')
head(tab)
tab %>% ggplot(aes(population/10^6, ev, label = abb)) +
geom_point() +
geom_text_repel() +
scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2") +
geom_smooth(method = "lm", se = FALSE)
library(ggrepel)
tab %>% ggplot(aes(population/10^6, ev, label = abb)) +
geom_point() +
geom_text_repel() +
scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2") +
geom_smooth(method = "lm", se = FALSE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(tidyverse)
library(dslabs)
data(murders)
head(murders)
knitr::opts_chunk$set(echo = TRUE)
data(polls_us_election_2016)
head(results_us_election_2016)
identical(results_us_election_2016$state, murders$state)
tab<-left_join(murders,results_us_election_2016,by='state')%>%
select(-others)%>%rename(ev='electoral_votes')
head(tab)
library(ggrepel)
tab %>% ggplot(aes(population/10^6, ev, label = abb)) +
geom_point() +
geom_text_repel() +
scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2") +
geom_smooth(method = "lm", se = FALSE)
library(ggrepel)
tab %>% ggplot(aes(population/10^6, ev, label = abb)) +
geom_point() +
geom_text_repel() +
scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2") +
geom_smooth(method = "lm", se = FALSE)
